#################################################################################
#  Config file
#
# List of all caches logical names, comma-separated
#
#caches.name.list=

#
# Caches types ('offheap', 'file' only supported), comma-separated
#
#caches.types.list=
 
#
# Cache victim name. If cache name is C1, then to lookup for its victim name 
# we must request 'C1.victim.name' property value 
#
#victim.name=

#
# File name for cache snapshot data
#
#cache.data=

# 
# File name for admission controller snapshot data 
#
#ac.data=

# 
# File name for throughput controller snapshot data 
#
#tc.data=

# 
# File name for admission queue snapshot data 
#
#aq.data=

# 
# File name for cache engine snapshot data 
#
#engine.data=

#  
# Cache snapshot directory - where to save index and statistics info 
#
#snapshot.dir.name=

# 
#  Cache data directory - where to save cached data 
#
#data.dir.name=

#   
# For in RAM cache  - segment size 
#
#segment.size=

# 
# For in RAM cache  - maximum memory limit to use for cache 
#
#maximum.size=

# 
# When to start GC (garbage collection) - size of the cache as a fraction of the maximum cache size 
#
#scavenger.start.ratio=

#
# When to stop GC (garbage collection) - size of the cache as a fraction of the maximum cache size
#
#scavenger.stop.ratio=

# 
# Discard cached entry if it in this lower percentile - start value 
#
#scavenger.dump.entry.below.start=

#
# Discard cached entry if it in this lower percentile - stop value (maximum) 
#
# scavenger.dump.entry.below.stop=
 
# 
# Number of segments in S-LRU
#
#slru.cache.segments=

# 
# New item insertion point for SLRU (segment number 1- based)
#
#slru.cache.insert.point=

#
# Admission Queue start size in fraction of a full cache size
#
#admission.queue.start.size=

# 
# Admission Queue minimum size in fraction of a full cache size
#
#admission.queue.min.size=

# 
# Admission Queue maximum size in fraction of a full cache size
#
#admission.queue.max.size=

# 
# Readmission evicted item to AQ minimum hit count threshold 
#
#readmission.hit.count.min=

# 
# Cumulative average write rate limit  (bytes/sec) 
#
#write.rate.limit=

#
# Incremental index rehashing 
#
#incremental.index.rehashing=
  
#
# Some file systems : ext4, xfs, APFS etc supports sparse files and so called 
# "hole punching" - discarding  regions of files. We use different algorithm of compaction when file system 
#  supports these features. Default: false.
#
#sparse.files.support=
  
#
# Index starting number of slots power of 2 - L ( N = 2**L) N - number of slots 
#
#index.slots.power=
  
#
# Cache write throughput check interval key  
#
#throughput.check.interval.ms= 
  
#
# Cache write throughput controller tolerance limit
#
#throughput.tolerance.limit=
  
#
# Throughput controller number of adjustment steps
#
#throughput.adjustment.steps=
  
#
# Cache write rejection threshold - when cache size exceeds this fraction of a maximum cache size -
# all new writes will be rejected until cache size decreases below this threshold
#
#write.rejection.limit=
  
#
# Does index support memory embedding
#
#index.data.embedded=
  
#
# Maximum data size to embed   
#
#index.data.embedded.size=
