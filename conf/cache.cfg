#################################################################################
#  Carrot Cache configuration file
#################################################################################

#
# List of all caches logical names, comma-separated
#
#caches.name.list=cache

#
# Caches types ('offheap', 'file' only supported), comma-separated
#
#caches.types.list=offheap
 
#
# Cache victim name. If cache name is C1, then to lookup for its victim name 
# we must request 'C1.victim.name' property value 
#
#victim.name=


#  
# Cache snapshot directory - where to save index and statistics info 
#
#snapshot.dir.name=snapshot

# 
#  Cache data directory - where to save cached data 
#
#data.dir.name=data

#   
# Data segment size 
# Default is 4MB (Offheap)
#cache.data.segment.size=4194304

# 
# Maximum storage limit to use for cache 
# Default - unlimited
#cache.data.max.size=0

# 
# When to start GC (garbage collection) - size of the cache as a fraction of the maximum cache size 
#
#scavenger.start.ratio=0.95

#
# When to stop GC (garbage collection) - size of the cache as a fraction of the maximum cache size
#
#scavenger.stop.ratio=0.9

# 
# Discard cached entry if it in this lower percentile - start value 
#
#scavenger.dump.entry.below.start=0.1

#
# Discard cached entry if it in this lower percentile - stop value (maximum) 
#
# scavenger.dump.entry.below.stop=0.5

#
# Number of popularity ranks (or bins to insert incoming writes to)
#
#cache.popularity.number.ranks=8

# 
# Number of segments in S-LRU (Eviction)
#
#eviction.slru.number.segments=8

# 
# New item insertion point for SLRU (Eviction)
#
#eviction.slru.insert.point=4

#
# Admission Queue start size in fraction of a full cache size(TBI)
#
#admission.queue.start.size=200000

# 
# Admission Queue minimum size in fraction of a full cache size (TBI)
#
#admission.queue.min.size=100000

# 
# Admission Queue maximum size in fraction of a full cache size (TBI)
#
#admission.queue.max.size=1000000

# 
# Re-admission evicted item to AQ minimum hit count threshold 
#
#cache.readmission.hit.count.min=1

# 
# Cumulative average write rate limit  (bytes/sec) (SSD - based caches)
# when throughput controller is enabled
#
#cache.write.avg.rate.limit=52428800

#
# Some file systems : ext4, xfs, APFS etc supports sparse files and so called 
# "hole punching" - discarding  regions of files. We use different algorithm of compaction when file system 
#  supports these features. Default: false.
#
#sparse.files.support=false
  
#
# Index starting number of slots power of 2 - L ( N = 2**L) N - number of slots 
#
#index.slots.power=10
  
#
# Cache write throughput check interval key  
#
#throughput.check.interval.sec=3600
  
#
# Cache write throughput controller tolerance limit
#
#throughput.tolerance.limit=0.05
  
#
# Throughput controller number of adjustment steps
#
#throughput.adjustment.steps=10

#
# Scavenger run interval in seconds
#
#scavenger.run.interval.sec=60

#
# Cache write maximum wait time in milliseconds 
#
#cache.writes.max.wait.time.ms=10
  
#
# Does index support memory embedding
#
#index.data.embedded=false
  
#
# Maximum data size to embed   
#
#index.data.embedded.size=100

#
# Class name for main queue index format implementation
#
#index.format.main.queue.impl=com.carrot.cache.index.MQIndexFormat
  
#
# Class name for admission queue index format implementation
#
#index.format.admission.queue.impl=com.carrot.cache.index.AQIndexFormat

#
# Class name for cache eviction policy implementation
#
#cache.eviction.policy.impl=com.carrot.cache.eviction.SLRUEvictionPolicy
  
#
# Class name for cache admission controller implementation
#
#cache.admission.controller.impl=com.carrot.cache.controllers.BaseAdmissionController
  
#
# Class name for cache throughput controller implementation
#
#cache.throughput.controller.impl=com.carrot.cache.controllers.BaseThroughputController
  
#
# Class name for cache recycling controller implementation
#
#cache.recycling.selector.impl=com.carrot.cache.controllers.MinAliveRecyclingSelector
  
#
# Class name for cache data appender implementation
#
#cache.data.writer.impl=com.carrot.cache.io.BaseDataWriter
  
#
# Class name for cache data reader implementation (Memory)
#
#cache.memory.data.reader.impl=com.carrot.cache.io.BaseMemoryDataReader
  
#
# Class name for cache data reader implementation (File)
#
#cache.file.data.reader.impl=com.carrot.cache.io.BaseFileDataReader
  
#
# Block writer block size
#
#cache.block.writer.block.size=4096
  
#
# File prefetch buffer size
#
#file.prefetch.buffer.size=4194304
  
#
# Cache expiration support implementation 
#
#cache.expire.support.impl=com.carrot.cache.expire.ExpireSupportSecondsMinutes
  
#
# Random admission controller ratio start
#
#cache.random.admission.ratio.start=1.0
  
#
# Random admission controller ratio stop
#cache.random.admission.ratio.stop=0.0
  
#
# For expiration based admission controller - minimum expiration supported in seconds
#
#cache.expire.start.bin.value=60
  
#
# For expiration  based admission controller - bin value multiplier
#
#cache.expire.multiplier.value=2
  
# 
# Keep active data set fraction above this threshold 
#cache.minimum.active.dataset.ratio=0.9 

#
# Cache eviction disabled mode
#
#cache.eviction.disabled.mode=false

#
# IO storage pool size
#cache.storage.pool.size=32

# 
# Promotion on hit from victim to main cache
#cache.victim.promotion.on.hit=true

#
# Scavenger number of segment processed before stall mode activated
# scavenger.max.segments.before.stall=10

#
# Victim cache promotion threshold
#cache.victim.promotion.threshold=0.9
