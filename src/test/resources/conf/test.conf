#################################################################################
#  Carrot Cache configuration file
#################################################################################

#
# List of all caches logical names, comma-separated
#
caches.name-list=cache1,cache2

#
# Caches types ('offheap', 'file' only supported), comma-separated
#
caches.types-list=offheap,file
 
#
# Cache victim name. If cache name is C1, then to lookup for its victim name 
# we must request 'C1.victim.name' property value 
#
victim.name=cache2


# 
#  Cache root directory - where to save cached data and snapshot
#
root.dir-path=./onecache1

#   
# Data segment size 
# Default is 4MB (Offheap)
data.segment-size=41943040

# 
# Maximum storage limit to use for cache 
# Default - unlimited
storage.max-size=1000000000000

# 
# When to start GC (garbage collection) - size of the cache as a fraction of the maximum cache size 
#
scavenger.start-ratio=0.98

#
# When to stop GC (garbage collection) - size of the cache as a fraction of the maximum cache size
#
scavenger.stop-ratio=0.91

# 
# Discard cached entry if it in this lower percentile - start value 
#
scavenger.dump-entry-below-min=0.2

#
# Discard cached entry if it in this lower percentile - stop value (maximum) 
#
scavenger.dump-entry-below-max=0.6

#
# Scavenger adjustment step
#
scavenger.dump-entry-below-step=0.2

#
# Scavenger number of threads
#
scavenger.number-threads=10

#
# Number of popularity ranks (or bins to insert incoming writes to)
#
popularity-number-ranks=9

#
# Minimum active data set ratio
#
minimum-active-dataset-ratio=0.8

#
# IO Pool size for FileIO save segments to disk
#
storage-io-pool-size=14

# 
# Number of segments in S-LRU (Eviction)
#
eviction.slru-number-segments=12

# 
# New item insertion point for SLRU (Eviction)
#
eviction.slru-insert-point=5

#
# Admission Queue start size in fraction of a full cache size
#
admission.queue-start-size-ratio=0.6

# 
# Admission Queue minimum size in fraction of a full cache size
#
admission.queue-min-size-ratio=0.2

# 
# Admission Queue maximum size in fraction of a full cache size
#
admission.queue-max-size-ratio=0.6

#
# Promotion Queue start size in fraction of a full cache size
#
promotion.queue-start-size-ratio=0.6

#
# Promotion Queue minimum size in fraction of a full cache size
#
promotion.queue-min-size-ratio=0.2

#
# Promotion Queue maximum size in fraction of a full cache size
#
promotion.queue-max-size-ratio=0.6

#
# Random configuration parameter for random promotion controller
#
promotion.probability=0.15

# 
# Cumulative average write rate limit  (bytes/sec) (SSD - based caches)
# when throughput controller is enabled
#
write.avg-rate-limit=524288000

#
# Some file systems : ext4, xfs, APFS etc supports sparse files and so called 
# "hole punching" - discarding  regions of files. We use different algorithm of compaction when file system 
#  supports these features. Default: false.
#
sparse-files-support=true
  
#
# Index starting number of slots power of 2 - L ( N = 2**L) N - number of slots 
#
index.slots-power=15

#
# Promote item from victim cache on hit
#  
victim.promotion-on-hit=false

#
# Cache write throughput check interval key  
#
throughput.check-interval-sec=36000
  
#
# Cache write throughput controller tolerance limit
#
throughput.tolerance-limit=0.051
  
#
# Throughput controller number of adjustment steps
#
throughput.adjustment-steps=11

#
# Scavenger run interval in seconds
#
scavenger.run-interval-sec=61
  
#
# Does index support memory embedding
#
index.data-embedded-support=true
  
#
# Maximum data size to embed   
#
index.data-embedded-size-max=101

#
# Class name for main queue index format implementation
#
index.format-main-queue-impl=com.onecache.core.index.CompactBaseIndexFormat
  
#
# Class name for admission queue index format implementation
#
index.format-admission-queue-impl=com.onecache.core.index.AQIndexFormat

#
# Class name for cache eviction policy implementation
#
eviction-policy-impl=com.onecache.core.eviction.LRUEvictionPolicy
  
#
# Class name for cache admission controller implementation (no default)
#
#throughput-controller-impl=
  
#
# Class name for cache recycling controller implementation
#
recycling-selector-impl=com.onecache.core.controllers.LRCRecyclingSelector
  
#
# Class name for cache data writer implementation
#
data-writer-impl=com.onecache.core.io.BlockDataWriter
  
#
# Class name for cache data reader implementation (Memory)
#
memory.data-reader-impl=com.onecache.core.io.BlockMemoryDataReader
  
#
# Class name for cache data reader implementation (File)
#
file.data-reader-impl=com.onecache.core.io.BlockFileDataReader
  
#
# Block writer block size
#
block-writer-block-size=4097
  
#
# File prefetch buffer size
#
file.prefetch-buffer-size=41943041
  
#
# Cache expiration support implementation 
# supports range 1 sec - ~ 32678 (2^15) min
#
expire-support-impl=com.onecache.core.expire.ExpireSupportSecondsMinutesHours
  
#
# Random admission controller ratio start
#
random.admission.ratio-start=0.9
  
#
# Random admission controller ratio stop
random.admission.ratio-stop=0.1
  
#
# For expiration based admission controller - minimum expiration supported in seconds
#
expire.start-bin-value=61
  
#
# For expiration  based admission controller - bin value multiplier
#
expire.multiplier-value=3
  
# 
# Keep active data set fraction above this threshold 
minimum-active-dataset-ratio=0.91 

#
# Cache eviction disabled mode
#
eviction.disabled-mode=true

#
# IO storage pool size
storage.io-pool-size=14

# 
# Promotion on hit from victim to main cache
victim.promotion-on-hit=false

#
# Victim cache promotion threshold
victim.promotion-threshold=0.91

#
# Spin wait time on high pressure in nanoseconds during PUT operation
spin.wait-time-ns=20000

#
# JMX metrics domain name
jmx.metrics-domain-name=com.onecache.core1

#
# Hybrid mode of operation. When inverse mode is on data goes first to victim cache and later will be promoted
# to the parent cache.
#
hybrid.inverse-mode=true

#
# Maximum wait time for put operation in ms
#
cache.max-wait-on-put-ms=200

#
# Maximum key-value size (limited by data segment size as well)
#
cache.max-key-value-size = 268435449

#
# Thread local storage support. Must be enabled for the server (memcached)
#
cache.tls-supported=true

#
# Initial buffer size for thread local storage
#
cache.tls-initial-buffer-size=65,537

#
# Maximum buffer size for thread local storage
#
cache.tls-maximum-buffer-size=268,435,451

############################
# Compression configuration
############################

#
# Cache compression enabled
#
cache.compression-enabled=true

#
# Compression block size
#
cache.compression-block-size=4097

#
# Compression dictionary size
#
cache.compression-dictionary-size=65,537

#
# Compression level (0-22 for ZSTD)
#
cache.compression-level=13

#
# Compression codec
#
cache.compression-codec=ZSTD1

#
# Compression dictionary enabled
#
cache.compression-dictionary-enabled=false

#
# Train dictionary on keys as well?
#
cache.compression-keys-enabled=false

#
# Dictionary training mode (full async is not supported yet)
#
cache.compression-dictionary-training-async=true

#
# Save cache on process shutdown
#
cache.save-on-shutdown=true